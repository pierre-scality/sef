{% from "scality/corosync/corosync.jinja" import corosync with context %}
totem {
	version: 2
	transport: udpu
	# How long before declaring a token lost (ms)
	token: 3000
	# How many token retransmits before forming a new configuration
	token_retransmits_before_loss_const: 10
	# How long to wait for join messages in the membership protocol (ms)
	join: 60
	# How long to wait for consensus to be achieved before starting a new round of membership configuration (ms)
	consensus: 3600
	# Turn off the virtual synchrony filter
	vsftype: none
	# Number of messages that may be sent by one processor on receipt of the token
	max_messages: 20
	# Limit generated nodeids to 31-bits (positive signed integers)
	clear_node_high_bit: yes
	# Disable encryption
 	secauth: off
	# How many threads to use for encryption/decryption
 	threads: 0
	# Optionally assign a fixed node id (integer)
	# nodeid: 1234
	# This specifies the mode of redundant ring, which may be none, active, or passive.
 	rrp_mode: none
 	interface {
		# The following values need to be set based on your environment 
		ringnumber: 0
		bindnetaddr: {{ corosync.bindnetaddr }}
		mcastaddr: 226.94.1.1
		mcastport: 5405
	}
	cluster_name: {{ corosync.cluster_name }}
}
amf {
	mode: disabled
}
quorum {
	# Quorum for the Pacemaker Cluster Resource Manager
	provider: corosync_votequorum
	expected_votes: 5
	quorum_votes: 0
	votes: 0
}
aisexec {
        user:   root
        group:  root
}
logging {
        fileline: off
        to_stderr: yes
        to_logfile: yes
        logfile: /var/log/corosync/corosync.log
        to_syslog: yes
	syslog_facility: daemon
        debug: off
        timestamp: on
        logger_subsys {
                subsys: AMF
                debug: off
                tags: enter|leave|trace1|trace2|trace3|trace4|trace6
        }
}
nodelist {
{% set coroif = corosync.corosync_if %}
{%- set target = "G@roles:ROLE_COROSYNC" -%}
{%- set corosync_nodes = salt["mine.get"](target, "grains.items", "compound") -%}
{% for node in corosync_nodes.keys()|sort %}
{% set idx = loop.index %}
  node {
    ring0_addr: {{ corosync_nodes[node]['ip4_interfaces'][coroif][0] }}
    quorum_votes: 0
    name: {{ node }}
    nodeid: {{ idx }}
  }
{% endfor %}
}
